// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  articulo: (where?: ArticuloWhereInput) => Promise<boolean>;
  articulo_detalle: (where?: Articulo_detalleWhereInput) => Promise<boolean>;
  menu: (where?: MenuWhereInput) => Promise<boolean>;
  producto: (where?: ProductoWhereInput) => Promise<boolean>;
  rol: (where?: RolWhereInput) => Promise<boolean>;
  usuarios: (where?: UsuariosWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  articulo: (where: ArticuloWhereUniqueInput) => Articulo;
  articuloes: (
    args?: {
      where?: ArticuloWhereInput;
      orderBy?: ArticuloOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ArticuloNode>;
  articuloesConnection: (
    args?: {
      where?: ArticuloWhereInput;
      orderBy?: ArticuloOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticuloConnection;
  articulo_detalle: (
    where: Articulo_detalleWhereUniqueInput
  ) => Articulo_detalle;
  articulo_detalles: (
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Articulo_detalleNode>;
  articulo_detallesConnection: (
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Articulo_detalleConnection;
  menu: (where: MenuWhereUniqueInput) => Menu;
  menus: (
    args?: {
      where?: MenuWhereInput;
      orderBy?: MenuOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MenuNode>;
  menusConnection: (
    args?: {
      where?: MenuWhereInput;
      orderBy?: MenuOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MenuConnection;
  producto: (where: ProductoWhereUniqueInput) => Producto;
  productoes: (
    args?: {
      where?: ProductoWhereInput;
      orderBy?: ProductoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProductoNode>;
  productoesConnection: (
    args?: {
      where?: ProductoWhereInput;
      orderBy?: ProductoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductoConnection;
  rol: (where: RolWhereUniqueInput) => Rol;
  rols: (
    args?: {
      where?: RolWhereInput;
      orderBy?: RolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RolNode>;
  rolsConnection: (
    args?: {
      where?: RolWhereInput;
      orderBy?: RolOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RolConnection;
  usuarios: (where: UsuariosWhereUniqueInput) => Usuarios;
  usuarioses: (
    args?: {
      where?: UsuariosWhereInput;
      orderBy?: UsuariosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UsuariosNode>;
  usuariosesConnection: (
    args?: {
      where?: UsuariosWhereInput;
      orderBy?: UsuariosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UsuariosConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticulo: (data: ArticuloCreateInput) => Articulo;
  updateArticulo: (
    args: { data: ArticuloUpdateInput; where: ArticuloWhereUniqueInput }
  ) => Articulo;
  updateManyArticuloes: (
    args: { data: ArticuloUpdateInput; where?: ArticuloWhereInput }
  ) => BatchPayload;
  upsertArticulo: (
    args: {
      where: ArticuloWhereUniqueInput;
      create: ArticuloCreateInput;
      update: ArticuloUpdateInput;
    }
  ) => Articulo;
  deleteArticulo: (where: ArticuloWhereUniqueInput) => Articulo;
  deleteManyArticuloes: (where?: ArticuloWhereInput) => BatchPayload;
  createArticulo_detalle: (
    data: Articulo_detalleCreateInput
  ) => Articulo_detalle;
  updateArticulo_detalle: (
    args: {
      data: Articulo_detalleUpdateInput;
      where: Articulo_detalleWhereUniqueInput;
    }
  ) => Articulo_detalle;
  updateManyArticulo_detalles: (
    args: {
      data: Articulo_detalleUpdateInput;
      where?: Articulo_detalleWhereInput;
    }
  ) => BatchPayload;
  upsertArticulo_detalle: (
    args: {
      where: Articulo_detalleWhereUniqueInput;
      create: Articulo_detalleCreateInput;
      update: Articulo_detalleUpdateInput;
    }
  ) => Articulo_detalle;
  deleteArticulo_detalle: (
    where: Articulo_detalleWhereUniqueInput
  ) => Articulo_detalle;
  deleteManyArticulo_detalles: (
    where?: Articulo_detalleWhereInput
  ) => BatchPayload;
  createMenu: (data: MenuCreateInput) => Menu;
  updateMenu: (
    args: { data: MenuUpdateInput; where: MenuWhereUniqueInput }
  ) => Menu;
  updateManyMenus: (
    args: { data: MenuUpdateInput; where?: MenuWhereInput }
  ) => BatchPayload;
  upsertMenu: (
    args: {
      where: MenuWhereUniqueInput;
      create: MenuCreateInput;
      update: MenuUpdateInput;
    }
  ) => Menu;
  deleteMenu: (where: MenuWhereUniqueInput) => Menu;
  deleteManyMenus: (where?: MenuWhereInput) => BatchPayload;
  createProducto: (data: ProductoCreateInput) => Producto;
  updateProducto: (
    args: { data: ProductoUpdateInput; where: ProductoWhereUniqueInput }
  ) => Producto;
  updateManyProductoes: (
    args: { data: ProductoUpdateInput; where?: ProductoWhereInput }
  ) => BatchPayload;
  upsertProducto: (
    args: {
      where: ProductoWhereUniqueInput;
      create: ProductoCreateInput;
      update: ProductoUpdateInput;
    }
  ) => Producto;
  deleteProducto: (where: ProductoWhereUniqueInput) => Producto;
  deleteManyProductoes: (where?: ProductoWhereInput) => BatchPayload;
  createRol: (data: RolCreateInput) => Rol;
  updateRol: (
    args: { data: RolUpdateInput; where: RolWhereUniqueInput }
  ) => Rol;
  updateManyRols: (
    args: { data: RolUpdateInput; where?: RolWhereInput }
  ) => BatchPayload;
  upsertRol: (
    args: {
      where: RolWhereUniqueInput;
      create: RolCreateInput;
      update: RolUpdateInput;
    }
  ) => Rol;
  deleteRol: (where: RolWhereUniqueInput) => Rol;
  deleteManyRols: (where?: RolWhereInput) => BatchPayload;
  createUsuarios: (data: UsuariosCreateInput) => Usuarios;
  updateUsuarios: (
    args: { data: UsuariosUpdateInput; where: UsuariosWhereUniqueInput }
  ) => Usuarios;
  updateManyUsuarioses: (
    args: { data: UsuariosUpdateInput; where?: UsuariosWhereInput }
  ) => BatchPayload;
  upsertUsuarios: (
    args: {
      where: UsuariosWhereUniqueInput;
      create: UsuariosCreateInput;
      update: UsuariosUpdateInput;
    }
  ) => Usuarios;
  deleteUsuarios: (where: UsuariosWhereUniqueInput) => Usuarios;
  deleteManyUsuarioses: (where?: UsuariosWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  articulo: (
    where?: ArticuloSubscriptionWhereInput
  ) => ArticuloSubscriptionPayloadSubscription;
  articulo_detalle: (
    where?: Articulo_detalleSubscriptionWhereInput
  ) => Articulo_detalleSubscriptionPayloadSubscription;
  menu: (
    where?: MenuSubscriptionWhereInput
  ) => MenuSubscriptionPayloadSubscription;
  producto: (
    where?: ProductoSubscriptionWhereInput
  ) => ProductoSubscriptionPayloadSubscription;
  rol: (
    where?: RolSubscriptionWhereInput
  ) => RolSubscriptionPayloadSubscription;
  usuarios: (
    where?: UsuariosSubscriptionWhereInput
  ) => UsuariosSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Articulo_detalleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "cantidad_ASC"
  | "cantidad_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ArticuloOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "tiempo_preparacion_ASC"
  | "tiempo_preparacion_DESC"
  | "valor_ASC"
  | "valor_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "stock_ASC"
  | "stock_DESC"
  | "valor_ASC"
  | "valor_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsuariosOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activo_ASC"
  | "activo_DESC"
  | "apellido_ASC"
  | "apellido_DESC"
  | "email_ASC"
  | "email_DESC"
  | "estado_ASC"
  | "estado_DESC"
  | "img_ASC"
  | "img_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "password_ASC"
  | "password_DESC"
  | "rol_ASC"
  | "rol_DESC"
  | "social_ASC"
  | "social_DESC"
  | "usuario_ASC"
  | "usuario_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface Articulo_detalleUpdateManyWithoutId_articuloInput {
  create?:
    | Articulo_detalleCreateWithoutId_articuloInput[]
    | Articulo_detalleCreateWithoutId_articuloInput;
  delete?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  connect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  disconnect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  update?:
    | Articulo_detalleUpdateWithWhereUniqueWithoutId_articuloInput[]
    | Articulo_detalleUpdateWithWhereUniqueWithoutId_articuloInput;
  upsert?:
    | Articulo_detalleUpsertWithWhereUniqueWithoutId_articuloInput[]
    | Articulo_detalleUpsertWithWhereUniqueWithoutId_articuloInput;
}

export type ArticuloWhereUniqueInput = AtLeastOne<{
  id: Int;
  nombre?: String;
}>;

export type UsuariosWhereUniqueInput = AtLeastOne<{
  id: Int;
  email?: String;
  usuario?: String;
}>;

export interface ArticuloCreateOneWithoutArticulo_detallesInput {
  create?: ArticuloCreateWithoutArticulo_detallesInput;
  connect?: ArticuloWhereUniqueInput;
}

export interface MenuUpdateInput {
  activo?: Boolean;
  articulos?: ArticuloUpdateManyWithoutId_menuInput;
  nombre?: String;
}

export interface ProductoUpdateWithoutArticulo_detallesDataInput {
  activo?: Boolean;
  nombre?: String;
  stock?: Int;
  valor?: Float;
}

export interface UsuariosWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  apellido?: String;
  apellido_not?: String;
  apellido_in?: String[] | String;
  apellido_not_in?: String[] | String;
  apellido_lt?: String;
  apellido_lte?: String;
  apellido_gt?: String;
  apellido_gte?: String;
  apellido_contains?: String;
  apellido_not_contains?: String;
  apellido_starts_with?: String;
  apellido_not_starts_with?: String;
  apellido_ends_with?: String;
  apellido_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  estado?: String;
  estado_not?: String;
  estado_in?: String[] | String;
  estado_not_in?: String[] | String;
  estado_lt?: String;
  estado_lte?: String;
  estado_gt?: String;
  estado_gte?: String;
  estado_contains?: String;
  estado_not_contains?: String;
  estado_starts_with?: String;
  estado_not_starts_with?: String;
  estado_ends_with?: String;
  estado_not_ends_with?: String;
  img?: String;
  img_not?: String;
  img_in?: String[] | String;
  img_not_in?: String[] | String;
  img_lt?: String;
  img_lte?: String;
  img_gt?: String;
  img_gte?: String;
  img_contains?: String;
  img_not_contains?: String;
  img_starts_with?: String;
  img_not_starts_with?: String;
  img_ends_with?: String;
  img_not_ends_with?: String;
  nombre?: String;
  nombre_not?: String;
  nombre_in?: String[] | String;
  nombre_not_in?: String[] | String;
  nombre_lt?: String;
  nombre_lte?: String;
  nombre_gt?: String;
  nombre_gte?: String;
  nombre_contains?: String;
  nombre_not_contains?: String;
  nombre_starts_with?: String;
  nombre_not_starts_with?: String;
  nombre_ends_with?: String;
  nombre_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  rol?: String;
  rol_not?: String;
  rol_in?: String[] | String;
  rol_not_in?: String[] | String;
  rol_lt?: String;
  rol_lte?: String;
  rol_gt?: String;
  rol_gte?: String;
  rol_contains?: String;
  rol_not_contains?: String;
  rol_starts_with?: String;
  rol_not_starts_with?: String;
  rol_ends_with?: String;
  rol_not_ends_with?: String;
  social?: Boolean;
  social_not?: Boolean;
  usuario?: String;
  usuario_not?: String;
  usuario_in?: String[] | String;
  usuario_not_in?: String[] | String;
  usuario_lt?: String;
  usuario_lte?: String;
  usuario_gt?: String;
  usuario_gte?: String;
  usuario_contains?: String;
  usuario_not_contains?: String;
  usuario_starts_with?: String;
  usuario_not_starts_with?: String;
  usuario_ends_with?: String;
  usuario_not_ends_with?: String;
  AND?: UsuariosWhereInput[] | UsuariosWhereInput;
  OR?: UsuariosWhereInput[] | UsuariosWhereInput;
  NOT?: UsuariosWhereInput[] | UsuariosWhereInput;
}

export interface RolSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RolWhereInput;
  AND?: RolSubscriptionWhereInput[] | RolSubscriptionWhereInput;
  OR?: RolSubscriptionWhereInput[] | RolSubscriptionWhereInput;
  NOT?: RolSubscriptionWhereInput[] | RolSubscriptionWhereInput;
}

export interface ArticuloCreateWithoutId_menuInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleCreateManyWithoutId_articuloInput;
  nombre: String;
  tiempo_preparacion?: DateTimeInput;
  valor: Float;
}

export interface MenuSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MenuWhereInput;
  AND?: MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput;
  OR?: MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput;
  NOT?: MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput;
}

export interface ArticuloCreateManyWithoutId_menuInput {
  create?:
    | ArticuloCreateWithoutId_menuInput[]
    | ArticuloCreateWithoutId_menuInput;
  connect?: ArticuloWhereUniqueInput[] | ArticuloWhereUniqueInput;
}

export interface Articulo_detalleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Articulo_detalleWhereInput;
  AND?:
    | Articulo_detalleSubscriptionWhereInput[]
    | Articulo_detalleSubscriptionWhereInput;
  OR?:
    | Articulo_detalleSubscriptionWhereInput[]
    | Articulo_detalleSubscriptionWhereInput;
  NOT?:
    | Articulo_detalleSubscriptionWhereInput[]
    | Articulo_detalleSubscriptionWhereInput;
}

export interface MenuCreateInput {
  activo?: Boolean;
  articulos?: ArticuloCreateManyWithoutId_menuInput;
  nombre: String;
}

export interface UsuariosUpdateInput {
  activo?: Boolean;
  apellido?: String;
  email?: String;
  estado?: String;
  img?: String;
  nombre?: String;
  password?: String;
  rol?: String;
  social?: Boolean;
  usuario?: String;
}

export interface ArticuloUpsertWithoutArticulo_detallesInput {
  update: ArticuloUpdateWithoutArticulo_detallesDataInput;
  create: ArticuloCreateWithoutArticulo_detallesInput;
}

export type Articulo_detalleWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface ArticuloUpdateWithoutArticulo_detallesDataInput {
  activo?: Boolean;
  id_menu?: MenuUpdateOneWithoutArticulosInput;
  nombre?: String;
  tiempo_preparacion?: DateTimeInput;
  valor?: Float;
}

export interface RolCreateInput {
  activo?: Boolean;
  nombre: String;
}

export type MenuWhereUniqueInput = AtLeastOne<{
  id: Int;
  nombre?: String;
}>;

export interface Articulo_detalleUpdateWithoutId_productoDataInput {
  activo?: Boolean;
  cantidad?: Int;
  id_articulo?: ArticuloUpdateOneWithoutArticulo_detallesInput;
}

export interface ArticuloCreateInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleCreateManyWithoutId_articuloInput;
  id_menu?: MenuCreateOneWithoutArticulosInput;
  nombre: String;
  tiempo_preparacion?: DateTimeInput;
  valor: Float;
}

export interface Articulo_detalleUpdateManyWithoutId_productoInput {
  create?:
    | Articulo_detalleCreateWithoutId_productoInput[]
    | Articulo_detalleCreateWithoutId_productoInput;
  delete?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  connect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  disconnect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
  update?:
    | Articulo_detalleUpdateWithWhereUniqueWithoutId_productoInput[]
    | Articulo_detalleUpdateWithWhereUniqueWithoutId_productoInput;
  upsert?:
    | Articulo_detalleUpsertWithWhereUniqueWithoutId_productoInput[]
    | Articulo_detalleUpsertWithWhereUniqueWithoutId_productoInput;
}

export interface Articulo_detalleCreateManyWithoutId_articuloInput {
  create?:
    | Articulo_detalleCreateWithoutId_articuloInput[]
    | Articulo_detalleCreateWithoutId_articuloInput;
  connect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
}

export interface Articulo_detalleWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  cantidad?: Int;
  cantidad_not?: Int;
  cantidad_in?: Int[] | Int;
  cantidad_not_in?: Int[] | Int;
  cantidad_lt?: Int;
  cantidad_lte?: Int;
  cantidad_gt?: Int;
  cantidad_gte?: Int;
  id_articulo?: ArticuloWhereInput;
  id_producto?: ProductoWhereInput;
  AND?: Articulo_detalleWhereInput[] | Articulo_detalleWhereInput;
  OR?: Articulo_detalleWhereInput[] | Articulo_detalleWhereInput;
  NOT?: Articulo_detalleWhereInput[] | Articulo_detalleWhereInput;
}

export interface Articulo_detalleCreateWithoutId_articuloInput {
  activo?: Boolean;
  cantidad: Int;
  id_producto?: ProductoCreateOneWithoutArticulo_detallesInput;
}

export interface Articulo_detalleCreateWithoutId_productoInput {
  activo?: Boolean;
  cantidad: Int;
  id_articulo?: ArticuloCreateOneWithoutArticulo_detallesInput;
}

export interface ProductoCreateOneWithoutArticulo_detallesInput {
  create?: ProductoCreateWithoutArticulo_detallesInput;
  connect?: ProductoWhereUniqueInput;
}

export type RolWhereUniqueInput = AtLeastOne<{
  id: Int;
  nombre?: String;
}>;

export interface ProductoCreateWithoutArticulo_detallesInput {
  activo?: Boolean;
  nombre: String;
  stock: Int;
  valor: Float;
}

export interface RolWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  nombre?: String;
  nombre_not?: String;
  nombre_in?: String[] | String;
  nombre_not_in?: String[] | String;
  nombre_lt?: String;
  nombre_lte?: String;
  nombre_gt?: String;
  nombre_gte?: String;
  nombre_contains?: String;
  nombre_not_contains?: String;
  nombre_starts_with?: String;
  nombre_not_starts_with?: String;
  nombre_ends_with?: String;
  nombre_not_ends_with?: String;
  AND?: RolWhereInput[] | RolWhereInput;
  OR?: RolWhereInput[] | RolWhereInput;
  NOT?: RolWhereInput[] | RolWhereInput;
}

export interface MenuCreateOneWithoutArticulosInput {
  create?: MenuCreateWithoutArticulosInput;
  connect?: MenuWhereUniqueInput;
}

export interface ArticuloUpdateWithoutId_menuDataInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleUpdateManyWithoutId_articuloInput;
  nombre?: String;
  tiempo_preparacion?: DateTimeInput;
  valor?: Float;
}

export interface MenuCreateWithoutArticulosInput {
  activo?: Boolean;
  nombre: String;
}

export interface ArticuloUpdateManyWithoutId_menuInput {
  create?:
    | ArticuloCreateWithoutId_menuInput[]
    | ArticuloCreateWithoutId_menuInput;
  delete?: ArticuloWhereUniqueInput[] | ArticuloWhereUniqueInput;
  connect?: ArticuloWhereUniqueInput[] | ArticuloWhereUniqueInput;
  disconnect?: ArticuloWhereUniqueInput[] | ArticuloWhereUniqueInput;
  update?:
    | ArticuloUpdateWithWhereUniqueWithoutId_menuInput[]
    | ArticuloUpdateWithWhereUniqueWithoutId_menuInput;
  upsert?:
    | ArticuloUpsertWithWhereUniqueWithoutId_menuInput[]
    | ArticuloUpsertWithWhereUniqueWithoutId_menuInput;
}

export interface ArticuloUpdateInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleUpdateManyWithoutId_articuloInput;
  id_menu?: MenuUpdateOneWithoutArticulosInput;
  nombre?: String;
  tiempo_preparacion?: DateTimeInput;
  valor?: Float;
}

export interface ProductoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductoWhereInput;
  AND?: ProductoSubscriptionWhereInput[] | ProductoSubscriptionWhereInput;
  OR?: ProductoSubscriptionWhereInput[] | ProductoSubscriptionWhereInput;
  NOT?: ProductoSubscriptionWhereInput[] | ProductoSubscriptionWhereInput;
}

export interface ArticuloUpdateOneWithoutArticulo_detallesInput {
  create?: ArticuloCreateWithoutArticulo_detallesInput;
  update?: ArticuloUpdateWithoutArticulo_detallesDataInput;
  upsert?: ArticuloUpsertWithoutArticulo_detallesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ArticuloWhereUniqueInput;
}

export interface ArticuloSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticuloWhereInput;
  AND?: ArticuloSubscriptionWhereInput[] | ArticuloSubscriptionWhereInput;
  OR?: ArticuloSubscriptionWhereInput[] | ArticuloSubscriptionWhereInput;
  NOT?: ArticuloSubscriptionWhereInput[] | ArticuloSubscriptionWhereInput;
}

export interface Articulo_detalleUpdateWithWhereUniqueWithoutId_articuloInput {
  where: Articulo_detalleWhereUniqueInput;
  data: Articulo_detalleUpdateWithoutId_articuloDataInput;
}

export interface RolUpdateInput {
  activo?: Boolean;
  nombre?: String;
}

export interface Articulo_detalleUpdateWithoutId_articuloDataInput {
  activo?: Boolean;
  cantidad?: Int;
  id_producto?: ProductoUpdateOneWithoutArticulo_detallesInput;
}

export interface ArticuloWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  articulo_detalles_every?: Articulo_detalleWhereInput;
  articulo_detalles_some?: Articulo_detalleWhereInput;
  articulo_detalles_none?: Articulo_detalleWhereInput;
  id_menu?: MenuWhereInput;
  nombre?: String;
  nombre_not?: String;
  nombre_in?: String[] | String;
  nombre_not_in?: String[] | String;
  nombre_lt?: String;
  nombre_lte?: String;
  nombre_gt?: String;
  nombre_gte?: String;
  nombre_contains?: String;
  nombre_not_contains?: String;
  nombre_starts_with?: String;
  nombre_not_starts_with?: String;
  nombre_ends_with?: String;
  nombre_not_ends_with?: String;
  tiempo_preparacion?: DateTimeInput;
  tiempo_preparacion_not?: DateTimeInput;
  tiempo_preparacion_in?: DateTimeInput[] | DateTimeInput;
  tiempo_preparacion_not_in?: DateTimeInput[] | DateTimeInput;
  tiempo_preparacion_lt?: DateTimeInput;
  tiempo_preparacion_lte?: DateTimeInput;
  tiempo_preparacion_gt?: DateTimeInput;
  tiempo_preparacion_gte?: DateTimeInput;
  valor?: Float;
  valor_not?: Float;
  valor_in?: Float[] | Float;
  valor_not_in?: Float[] | Float;
  valor_lt?: Float;
  valor_lte?: Float;
  valor_gt?: Float;
  valor_gte?: Float;
  AND?: ArticuloWhereInput[] | ArticuloWhereInput;
  OR?: ArticuloWhereInput[] | ArticuloWhereInput;
  NOT?: ArticuloWhereInput[] | ArticuloWhereInput;
}

export interface ProductoUpdateOneWithoutArticulo_detallesInput {
  create?: ProductoCreateWithoutArticulo_detallesInput;
  update?: ProductoUpdateWithoutArticulo_detallesDataInput;
  upsert?: ProductoUpsertWithoutArticulo_detallesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProductoWhereUniqueInput;
}

export type ProductoWhereUniqueInput = AtLeastOne<{
  id: Int;
  nombre?: String;
}>;

export interface ProductoWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  articulo_detalles_every?: Articulo_detalleWhereInput;
  articulo_detalles_some?: Articulo_detalleWhereInput;
  articulo_detalles_none?: Articulo_detalleWhereInput;
  nombre?: String;
  nombre_not?: String;
  nombre_in?: String[] | String;
  nombre_not_in?: String[] | String;
  nombre_lt?: String;
  nombre_lte?: String;
  nombre_gt?: String;
  nombre_gte?: String;
  nombre_contains?: String;
  nombre_not_contains?: String;
  nombre_starts_with?: String;
  nombre_not_starts_with?: String;
  nombre_ends_with?: String;
  nombre_not_ends_with?: String;
  stock?: Int;
  stock_not?: Int;
  stock_in?: Int[] | Int;
  stock_not_in?: Int[] | Int;
  stock_lt?: Int;
  stock_lte?: Int;
  stock_gt?: Int;
  stock_gte?: Int;
  valor?: Float;
  valor_not?: Float;
  valor_in?: Float[] | Float;
  valor_not_in?: Float[] | Float;
  valor_lt?: Float;
  valor_lte?: Float;
  valor_gt?: Float;
  valor_gte?: Float;
  AND?: ProductoWhereInput[] | ProductoWhereInput;
  OR?: ProductoWhereInput[] | ProductoWhereInput;
  NOT?: ProductoWhereInput[] | ProductoWhereInput;
}

export interface Articulo_detalleCreateManyWithoutId_productoInput {
  create?:
    | Articulo_detalleCreateWithoutId_productoInput[]
    | Articulo_detalleCreateWithoutId_productoInput;
  connect?:
    | Articulo_detalleWhereUniqueInput[]
    | Articulo_detalleWhereUniqueInput;
}

export interface ProductoUpsertWithoutArticulo_detallesInput {
  update: ProductoUpdateWithoutArticulo_detallesDataInput;
  create: ProductoCreateWithoutArticulo_detallesInput;
}

export interface ArticuloUpsertWithWhereUniqueWithoutId_menuInput {
  where: ArticuloWhereUniqueInput;
  update: ArticuloUpdateWithoutId_menuDataInput;
  create: ArticuloCreateWithoutId_menuInput;
}

export interface Articulo_detalleUpsertWithWhereUniqueWithoutId_articuloInput {
  where: Articulo_detalleWhereUniqueInput;
  update: Articulo_detalleUpdateWithoutId_articuloDataInput;
  create: Articulo_detalleCreateWithoutId_articuloInput;
}

export interface UsuariosSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UsuariosWhereInput;
  AND?: UsuariosSubscriptionWhereInput[] | UsuariosSubscriptionWhereInput;
  OR?: UsuariosSubscriptionWhereInput[] | UsuariosSubscriptionWhereInput;
  NOT?: UsuariosSubscriptionWhereInput[] | UsuariosSubscriptionWhereInput;
}

export interface MenuUpdateOneWithoutArticulosInput {
  create?: MenuCreateWithoutArticulosInput;
  update?: MenuUpdateWithoutArticulosDataInput;
  upsert?: MenuUpsertWithoutArticulosInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MenuWhereUniqueInput;
}

export interface UsuariosCreateInput {
  activo?: Boolean;
  apellido?: String;
  email?: String;
  estado?: String;
  img?: String;
  nombre?: String;
  password?: String;
  rol?: String;
  social?: Boolean;
  usuario?: String;
}

export interface MenuUpdateWithoutArticulosDataInput {
  activo?: Boolean;
  nombre?: String;
}

export interface Articulo_detalleUpdateWithWhereUniqueWithoutId_productoInput {
  where: Articulo_detalleWhereUniqueInput;
  data: Articulo_detalleUpdateWithoutId_productoDataInput;
}

export interface Articulo_detalleCreateInput {
  activo?: Boolean;
  cantidad: Int;
  id_articulo?: ArticuloCreateOneWithoutArticulo_detallesInput;
  id_producto?: ProductoCreateOneWithoutArticulo_detallesInput;
}

export interface ArticuloCreateWithoutArticulo_detallesInput {
  activo?: Boolean;
  id_menu?: MenuCreateOneWithoutArticulosInput;
  nombre: String;
  tiempo_preparacion?: DateTimeInput;
  valor: Float;
}

export interface Articulo_detalleUpdateInput {
  activo?: Boolean;
  cantidad?: Int;
  id_articulo?: ArticuloUpdateOneWithoutArticulo_detallesInput;
  id_producto?: ProductoUpdateOneWithoutArticulo_detallesInput;
}

export interface MenuUpsertWithoutArticulosInput {
  update: MenuUpdateWithoutArticulosDataInput;
  create: MenuCreateWithoutArticulosInput;
}

export interface ProductoUpdateInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleUpdateManyWithoutId_productoInput;
  nombre?: String;
  stock?: Int;
  valor?: Float;
}

export interface Articulo_detalleUpsertWithWhereUniqueWithoutId_productoInput {
  where: Articulo_detalleWhereUniqueInput;
  update: Articulo_detalleUpdateWithoutId_productoDataInput;
  create: Articulo_detalleCreateWithoutId_productoInput;
}

export interface MenuWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  activo?: Boolean;
  activo_not?: Boolean;
  articulos_every?: ArticuloWhereInput;
  articulos_some?: ArticuloWhereInput;
  articulos_none?: ArticuloWhereInput;
  nombre?: String;
  nombre_not?: String;
  nombre_in?: String[] | String;
  nombre_not_in?: String[] | String;
  nombre_lt?: String;
  nombre_lte?: String;
  nombre_gt?: String;
  nombre_gte?: String;
  nombre_contains?: String;
  nombre_not_contains?: String;
  nombre_starts_with?: String;
  nombre_not_starts_with?: String;
  nombre_ends_with?: String;
  nombre_not_ends_with?: String;
  AND?: MenuWhereInput[] | MenuWhereInput;
  OR?: MenuWhereInput[] | MenuWhereInput;
  NOT?: MenuWhereInput[] | MenuWhereInput;
}

export interface ArticuloUpdateWithWhereUniqueWithoutId_menuInput {
  where: ArticuloWhereUniqueInput;
  data: ArticuloUpdateWithoutId_menuDataInput;
}

export interface ProductoCreateInput {
  activo?: Boolean;
  articulo_detalles?: Articulo_detalleCreateManyWithoutId_productoInput;
  nombre: String;
  stock: Int;
  valor: Float;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UsuariosPreviousValuesNode {
  id: Int;
  activo: Boolean;
  apellido?: String;
  email?: String;
  estado?: String;
  img?: String;
  nombre?: String;
  password?: String;
  rol?: String;
  social?: Boolean;
  usuario?: String;
}

export interface UsuariosPreviousValues
  extends Promise<UsuariosPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  apellido: () => Promise<String>;
  email: () => Promise<String>;
  estado: () => Promise<String>;
  img: () => Promise<String>;
  nombre: () => Promise<String>;
  password: () => Promise<String>;
  rol: () => Promise<String>;
  social: () => Promise<Boolean>;
  usuario: () => Promise<String>;
}

export interface UsuariosPreviousValuesSubscription
  extends Promise<AsyncIterator<UsuariosPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  apellido: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  estado: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  rol: () => Promise<AsyncIterator<String>>;
  social: () => Promise<AsyncIterator<Boolean>>;
  usuario: () => Promise<AsyncIterator<String>>;
}

export interface MenuConnectionNode {}

export interface MenuConnection
  extends Promise<MenuConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MenuEdgeNode>>() => T;
  aggregate: <T = AggregateMenu>() => T;
}

export interface MenuConnectionSubscription
  extends Promise<AsyncIterator<MenuConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuSubscription>() => T;
}

export interface ProductoPreviousValuesNode {
  id: Int;
  activo: Boolean;
  nombre: String;
  stock: Int;
  valor: Float;
}

export interface ProductoPreviousValues
  extends Promise<ProductoPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  nombre: () => Promise<String>;
  stock: () => Promise<Int>;
  valor: () => Promise<Float>;
}

export interface ProductoPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductoPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<String>>;
  stock: () => Promise<AsyncIterator<Int>>;
  valor: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateArticulo_detalleNode {
  count: Int;
}

export interface AggregateArticulo_detalle
  extends Promise<AggregateArticulo_detalleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticulo_detalleSubscription
  extends Promise<AsyncIterator<AggregateArticulo_detalleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Articulo_detalleConnectionNode {}

export interface Articulo_detalleConnection
  extends Promise<Articulo_detalleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<Articulo_detalleEdgeNode>>() => T;
  aggregate: <T = AggregateArticulo_detalle>() => T;
}

export interface Articulo_detalleConnectionSubscription
  extends Promise<AsyncIterator<Articulo_detalleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Articulo_detalleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticulo_detalleSubscription>() => T;
}

export interface Articulo_detalleEdgeNode {
  cursor: String;
}

export interface Articulo_detalleEdge
  extends Promise<Articulo_detalleEdgeNode>,
    Fragmentable {
  node: <T = Articulo_detalle>() => T;
  cursor: () => Promise<String>;
}

export interface Articulo_detalleEdgeSubscription
  extends Promise<AsyncIterator<Articulo_detalleEdgeNode>>,
    Fragmentable {
  node: <T = Articulo_detalleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RolPreviousValuesNode {
  id: Int;
  activo: Boolean;
  nombre: String;
}

export interface RolPreviousValues
  extends Promise<RolPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  nombre: () => Promise<String>;
}

export interface RolPreviousValuesSubscription
  extends Promise<AsyncIterator<RolPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UsuariosEdgeNode {
  cursor: String;
}

export interface UsuariosEdge extends Promise<UsuariosEdgeNode>, Fragmentable {
  node: <T = Usuarios>() => T;
  cursor: () => Promise<String>;
}

export interface UsuariosEdgeSubscription
  extends Promise<AsyncIterator<UsuariosEdgeNode>>,
    Fragmentable {
  node: <T = UsuariosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArticuloNode {
  count: Int;
}

export interface AggregateArticulo
  extends Promise<AggregateArticuloNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticuloSubscription
  extends Promise<AsyncIterator<AggregateArticuloNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticuloNode {
  id: Int;
  activo: Boolean;
  nombre: String;
  tiempo_preparacion?: DateTimeOutput;
  valor: Float;
}

export interface Articulo extends Promise<ArticuloNode>, Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  articulo_detalles: <T = FragmentableArray<Articulo_detalleNode>>(
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id_menu: <T = Menu>() => T;
  nombre: () => Promise<String>;
  tiempo_preparacion: () => Promise<DateTimeOutput>;
  valor: () => Promise<Float>;
}

export interface ArticuloSubscription
  extends Promise<AsyncIterator<ArticuloNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  articulo_detalles: <T = Promise<AsyncIterator<Articulo_detalleSubscription>>>(
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id_menu: <T = MenuSubscription>() => T;
  nombre: () => Promise<AsyncIterator<String>>;
  tiempo_preparacion: () => Promise<AsyncIterator<DateTimeOutput>>;
  valor: () => Promise<AsyncIterator<Float>>;
}

export interface ArticuloEdgeNode {
  cursor: String;
}

export interface ArticuloEdge extends Promise<ArticuloEdgeNode>, Fragmentable {
  node: <T = Articulo>() => T;
  cursor: () => Promise<String>;
}

export interface ArticuloEdgeSubscription
  extends Promise<AsyncIterator<ArticuloEdgeNode>>,
    Fragmentable {
  node: <T = ArticuloSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRolNode {
  count: Int;
}

export interface AggregateRol extends Promise<AggregateRolNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRolSubscription
  extends Promise<AsyncIterator<AggregateRolNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RolConnectionNode {}

export interface RolConnection
  extends Promise<RolConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RolEdgeNode>>() => T;
  aggregate: <T = AggregateRol>() => T;
}

export interface RolConnectionSubscription
  extends Promise<AsyncIterator<RolConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRolSubscription>() => T;
}

export interface Articulo_detalleNode {
  id: Int;
  activo: Boolean;
  cantidad: Int;
}

export interface Articulo_detalle
  extends Promise<Articulo_detalleNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  cantidad: () => Promise<Int>;
  id_articulo: <T = Articulo>() => T;
  id_producto: <T = Producto>() => T;
}

export interface Articulo_detalleSubscription
  extends Promise<AsyncIterator<Articulo_detalleNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  cantidad: () => Promise<AsyncIterator<Int>>;
  id_articulo: <T = ArticuloSubscription>() => T;
  id_producto: <T = ProductoSubscription>() => T;
}

export interface RolNode {
  id: Int;
  activo: Boolean;
  nombre: String;
}

export interface Rol extends Promise<RolNode>, Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  nombre: () => Promise<String>;
}

export interface RolSubscription
  extends Promise<AsyncIterator<RolNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<String>>;
}

export interface ArticuloSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticuloSubscriptionPayload
  extends Promise<ArticuloSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Articulo>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticuloPreviousValues>() => T;
}

export interface ArticuloSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticuloSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticuloSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticuloPreviousValuesSubscription>() => T;
}

export interface ProductoEdgeNode {
  cursor: String;
}

export interface ProductoEdge extends Promise<ProductoEdgeNode>, Fragmentable {
  node: <T = Producto>() => T;
  cursor: () => Promise<String>;
}

export interface ProductoEdgeSubscription
  extends Promise<AsyncIterator<ProductoEdgeNode>>,
    Fragmentable {
  node: <T = ProductoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticuloPreviousValuesNode {
  id: Int;
  activo: Boolean;
  nombre: String;
  tiempo_preparacion?: DateTimeOutput;
  valor: Float;
}

export interface ArticuloPreviousValues
  extends Promise<ArticuloPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  nombre: () => Promise<String>;
  tiempo_preparacion: () => Promise<DateTimeOutput>;
  valor: () => Promise<Float>;
}

export interface ArticuloPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticuloPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<String>>;
  tiempo_preparacion: () => Promise<AsyncIterator<DateTimeOutput>>;
  valor: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateMenuNode {
  count: Int;
}

export interface AggregateMenu
  extends Promise<AggregateMenuNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuSubscription
  extends Promise<AsyncIterator<AggregateMenuNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticuloConnectionNode {}

export interface ArticuloConnection
  extends Promise<ArticuloConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ArticuloEdgeNode>>() => T;
  aggregate: <T = AggregateArticulo>() => T;
}

export interface ArticuloConnectionSubscription
  extends Promise<AsyncIterator<ArticuloConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticuloEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticuloSubscription>() => T;
}

export interface UsuariosSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UsuariosSubscriptionPayload
  extends Promise<UsuariosSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Usuarios>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsuariosPreviousValues>() => T;
}

export interface UsuariosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsuariosSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsuariosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsuariosPreviousValuesSubscription>() => T;
}

export interface Articulo_detalleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Articulo_detalleSubscriptionPayload
  extends Promise<Articulo_detalleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Articulo_detalle>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Articulo_detallePreviousValues>() => T;
}

export interface Articulo_detalleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Articulo_detalleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Articulo_detalleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Articulo_detallePreviousValuesSubscription>() => T;
}

export interface UsuariosConnectionNode {}

export interface UsuariosConnection
  extends Promise<UsuariosConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UsuariosEdgeNode>>() => T;
  aggregate: <T = AggregateUsuarios>() => T;
}

export interface UsuariosConnectionSubscription
  extends Promise<AsyncIterator<UsuariosConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsuariosEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsuariosSubscription>() => T;
}

export interface Articulo_detallePreviousValuesNode {
  id: Int;
  activo: Boolean;
  cantidad: Int;
}

export interface Articulo_detallePreviousValues
  extends Promise<Articulo_detallePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  cantidad: () => Promise<Int>;
}

export interface Articulo_detallePreviousValuesSubscription
  extends Promise<AsyncIterator<Articulo_detallePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  cantidad: () => Promise<AsyncIterator<Int>>;
}

export interface RolEdgeNode {
  cursor: String;
}

export interface RolEdge extends Promise<RolEdgeNode>, Fragmentable {
  node: <T = Rol>() => T;
  cursor: () => Promise<String>;
}

export interface RolEdgeSubscription
  extends Promise<AsyncIterator<RolEdgeNode>>,
    Fragmentable {
  node: <T = RolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MenuNode {
  id: Int;
  activo: Boolean;
  nombre: String;
}

export interface Menu extends Promise<MenuNode>, Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  articulos: <T = FragmentableArray<ArticuloNode>>(
    args?: {
      where?: ArticuloWhereInput;
      orderBy?: ArticuloOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nombre: () => Promise<String>;
}

export interface MenuSubscription
  extends Promise<AsyncIterator<MenuNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  articulos: <T = Promise<AsyncIterator<ArticuloSubscription>>>(
    args?: {
      where?: ArticuloWhereInput;
      orderBy?: ArticuloOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nombre: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductoNode {
  count: Int;
}

export interface AggregateProducto
  extends Promise<AggregateProductoNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductoSubscription
  extends Promise<AsyncIterator<AggregateProductoNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuEdgeNode {
  cursor: String;
}

export interface MenuEdge extends Promise<MenuEdgeNode>, Fragmentable {
  node: <T = Menu>() => T;
  cursor: () => Promise<String>;
}

export interface MenuEdgeSubscription
  extends Promise<AsyncIterator<MenuEdgeNode>>,
    Fragmentable {
  node: <T = MenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductoSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProductoSubscriptionPayload
  extends Promise<ProductoSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Producto>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductoPreviousValues>() => T;
}

export interface ProductoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductoSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductoPreviousValuesSubscription>() => T;
}

export interface ProductoNode {
  id: Int;
  activo: Boolean;
  nombre: String;
  stock: Int;
  valor: Float;
}

export interface Producto extends Promise<ProductoNode>, Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  articulo_detalles: <T = FragmentableArray<Articulo_detalleNode>>(
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nombre: () => Promise<String>;
  stock: () => Promise<Int>;
  valor: () => Promise<Float>;
}

export interface ProductoSubscription
  extends Promise<AsyncIterator<ProductoNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  articulo_detalles: <T = Promise<AsyncIterator<Articulo_detalleSubscription>>>(
    args?: {
      where?: Articulo_detalleWhereInput;
      orderBy?: Articulo_detalleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  nombre: () => Promise<AsyncIterator<String>>;
  stock: () => Promise<AsyncIterator<Int>>;
  valor: () => Promise<AsyncIterator<Float>>;
}

export interface MenuPreviousValuesNode {
  id: Int;
  activo: Boolean;
  nombre: String;
}

export interface MenuPreviousValues
  extends Promise<MenuPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  nombre: () => Promise<String>;
}

export interface MenuPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<String>>;
}

export interface MenuSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MenuSubscriptionPayload
  extends Promise<MenuSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Menu>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuPreviousValues>() => T;
}

export interface MenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuPreviousValuesSubscription>() => T;
}

export interface AggregateUsuariosNode {
  count: Int;
}

export interface AggregateUsuarios
  extends Promise<AggregateUsuariosNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsuariosSubscription
  extends Promise<AsyncIterator<AggregateUsuariosNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductoConnectionNode {}

export interface ProductoConnection
  extends Promise<ProductoConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ProductoEdgeNode>>() => T;
  aggregate: <T = AggregateProducto>() => T;
}

export interface ProductoConnectionSubscription
  extends Promise<AsyncIterator<ProductoConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductoSubscription>() => T;
}

export interface RolSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RolSubscriptionPayload
  extends Promise<RolSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Rol>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolPreviousValues>() => T;
}

export interface RolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RolSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolPreviousValuesSubscription>() => T;
}

export interface UsuariosNode {
  id: Int;
  activo: Boolean;
  apellido?: String;
  email?: String;
  estado?: String;
  img?: String;
  nombre?: String;
  password?: String;
  rol?: String;
  social?: Boolean;
  usuario?: String;
}

export interface Usuarios extends Promise<UsuariosNode>, Fragmentable {
  id: () => Promise<Int>;
  activo: () => Promise<Boolean>;
  apellido: () => Promise<String>;
  email: () => Promise<String>;
  estado: () => Promise<String>;
  img: () => Promise<String>;
  nombre: () => Promise<String>;
  password: () => Promise<String>;
  rol: () => Promise<String>;
  social: () => Promise<Boolean>;
  usuario: () => Promise<String>;
}

export interface UsuariosSubscription
  extends Promise<AsyncIterator<UsuariosNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activo: () => Promise<AsyncIterator<Boolean>>;
  apellido: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  estado: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  rol: () => Promise<AsyncIterator<String>>;
  social: () => Promise<AsyncIterator<Boolean>>;
  usuario: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
